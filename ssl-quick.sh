#!/bin/bash

# Quick SSL Setup for NAT/Router Environments
# Simplified version that skips problematic connectivity tests
# Perfect for khudroo.com behind router/NAT

set -e

DOMAIN="${1:-khudroo.com}"
EMAIL="${2:-admin@khudroo.com}"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== Quick SSL Setup for $DOMAIN (NAT/Router Optimized) ===${NC}"

# Create directories
echo "Setting up SSL directories..."
mkdir -p ssl/certbot/conf ssl/certbot/www ssl/logs nginx/conf.d

# Find Docker network
echo "Detecting Docker network..."
NETWORK_NAME=$(docker network ls --format "{{.Name}}" | grep -E "(odoo|multi.*tenant)" | head -1)

if [ -z "$NETWORK_NAME" ]; then
    echo -e "${RED}Could not detect Docker network${NC}"
    echo "Available networks:"
    docker network ls
    exit 1
fi

echo -e "${GREEN}Using network: $NETWORK_NAME${NC}"

# Restart containers
echo "Restarting Docker containers..."
docker-compose restart
sleep 10

# Generate DH parameters if needed
if [ ! -f "ssl/dhparam.pem" ]; then
    echo "Generating DH parameters..."
    openssl dhparam -out ssl/dhparam.pem 2048
fi

# Get SSL certificate
echo -e "${GREEN}Requesting SSL certificate from Let's Encrypt...${NC}"
echo -e "${YELLOW}Domain will be validated from the internet${NC}"

# Check if certificate already exists
echo "Checking for existing certificates..."
docker run --rm \
    -v "$(pwd)/ssl/certbot/conf:/etc/letsencrypt" \
    certbot/certbot certificates

# Force certificate renewal/creation
if docker run --rm \
    -v "$(pwd)/ssl/certbot/conf:/etc/letsencrypt" \
    -v "$(pwd)/ssl/certbot/www:/var/www/certbot" \
    --network "$NETWORK_NAME" \
    certbot/certbot certonly \
    --webroot \
    --webroot-path=/var/www/certbot \
    --email "$EMAIL" \
    --agree-tos \
    --no-eff-email \
    --force-renewal \
    --non-interactive \
    -d "$DOMAIN"; then
    
    echo -e "${GREEN}âœ… SSL Certificate obtained!${NC}"
else
    echo -e "${RED}âœ— Certificate request failed${NC}"
    exit 1
fi

# Find certificate path (handles -0001, -0002 suffixes and more)
echo "Searching for certificate files..."
CERT_PATH=""

# Check multiple possible locations
cert_candidates=(
    "ssl/certbot/conf/live/$DOMAIN"
    "ssl/certbot/conf/live/$DOMAIN-0001" 
    "ssl/certbot/conf/live/$DOMAIN-0002"
    "ssl/certbot/conf/live/$DOMAIN-0003"
)

for cert_dir in "${cert_candidates[@]}"; do
    echo "Checking: $cert_dir"
    if [[ -f "$cert_dir/fullchain.pem" && -f "$cert_dir/privkey.pem" ]]; then
        CERT_PATH="$cert_dir"
        echo -e "${GREEN}Found certificate at: $cert_dir${NC}"
        break
    fi
done

# If still not found, search all live directories
if [ -z "$CERT_PATH" ]; then
    echo "Searching all certificate directories..."
    if [ -d "ssl/certbot/conf/live" ]; then
        for cert_dir in ssl/certbot/conf/live/*/; do
            if [[ -f "$cert_dir/fullchain.pem" && -f "$cert_dir/privkey.pem" ]]; then
                CERT_PATH="$cert_dir"
                echo -e "${GREEN}Found certificate at: $cert_dir${NC}"
                break
            fi
        done
    fi
fi

if [ -z "$CERT_PATH" ]; then
    echo -e "${RED}Certificate files not found${NC}"
    echo "Available directories:"
    ls -la ssl/certbot/conf/ 2>/dev/null || echo "No certbot conf directory"
    ls -la ssl/certbot/conf/live/ 2>/dev/null || echo "No live certificates directory"
    exit 1
fi

CERT_DIR_NAME=$(basename "$CERT_PATH")
echo -e "${GREEN}Certificate found at: $CERT_DIR_NAME${NC}"

# Create SSL configuration
cat > nginx/conf.d/quick-ssl.conf << EOF
# Quick SSL Configuration for $DOMAIN
# Generated by ssl-quick.sh

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name $DOMAIN;
    
    # ACME challenge
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files \$uri \$uri/ =404;
        allow all;
    }
    
    # Redirect to HTTPS
    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl;
    http2 on;
    server_name $DOMAIN;
    
    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/$CERT_DIR_NAME/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$CERT_DIR_NAME/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/$CERT_DIR_NAME/chain.pem;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL_QUICK:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # ACME challenge
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files \$uri \$uri/ =404;
        allow all;
    }
    
    # Main application
    location / {
        proxy_pass http://saas_manager;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Port \$server_port;
        
        # WebSocket support
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection \$connection_upgrade;
        
        # Error handling
        proxy_intercept_errors on;
    }
}
EOF

echo -e "${GREEN}âœ“ SSL configuration created${NC}"

# Disable conflicting configs
for config in nginx/conf.d/*ssl*.conf; do
    if [[ "$config" != "nginx/conf.d/quick-ssl.conf" && -f "$config" ]]; then
        mv "$config" "$config.disabled"
        echo -e "${GREEN}âœ“ Disabled: $(basename "$config")${NC}"
    fi
done

# Add include to nginx.conf if needed
if ! grep -q "include /etc/nginx/conf.d/\*.conf;" nginx/nginx.conf; then
    sed -i '/^}$/i\    include /etc/nginx/conf.d/*.conf;' nginx/nginx.conf
    echo -e "${GREEN}âœ“ Updated nginx.conf${NC}"
fi

# Test nginx configuration
echo "Testing nginx configuration..."
if docker-compose exec nginx nginx -t; then
    echo -e "${GREEN}âœ“ Nginx config valid${NC}"
    
    # Restart nginx
    echo "Restarting nginx..."
    docker-compose restart nginx
    
    echo ""
    echo -e "${GREEN}ðŸŽ‰ SSL SETUP COMPLETED SUCCESSFULLY!${NC}"
    echo -e "${GREEN}âœ… Domain: https://$DOMAIN${NC}"
    echo -e "${GREEN}âœ… Certificate: Let's Encrypt (globally trusted)${NC}"
    echo -e "${GREEN}âœ… Certificate path: $CERT_DIR_NAME${NC}"
    echo ""
    echo -e "${BLUE}ðŸ”— Test your site: https://$DOMAIN${NC}"
    echo -e "${BLUE}ðŸ”’ SSL rating: https://www.ssllabs.com/ssltest/analyze.html?d=$DOMAIN${NC}"
    
    # Setup auto-renewal
    cat > ssl/renew-quick.sh << 'RENEW_SCRIPT'
#!/bin/bash
cd "$(dirname "$0")/.."
NETWORK=$(docker network ls --format "{{.Name}}" | grep -E "(odoo|multi.*tenant)" | head -1)
echo "$(date): Renewing certificates..."
if docker run --rm \
    -v "$(pwd)/ssl/certbot/conf:/etc/letsencrypt" \
    -v "$(pwd)/ssl/certbot/www:/var/www/certbot" \
    --network "$NETWORK" \
    certbot/certbot renew --quiet; then
    docker-compose exec nginx nginx -s reload
    echo "$(date): Renewal completed successfully"
else
    echo "$(date): Renewal failed"
    exit 1
fi
RENEW_SCRIPT
    
    chmod +x ssl/renew-quick.sh
    
    # Add to cron
    (crontab -l 2>/dev/null | grep -v "renew-quick"; echo "0 2,14 * * * cd $(pwd) && ./ssl/renew-quick.sh >> ssl/logs/renewal.log 2>&1") | crontab -
    
    echo -e "${GREEN}âœ… Auto-renewal configured${NC}"
    
else
    echo -e "${RED}âœ— Nginx configuration test failed${NC}"
    docker-compose logs --tail=10 nginx
    exit 1
fi