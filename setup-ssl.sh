#!/bin/bash

# Let's Encrypt SSL Setup Script for Odoo Multi-Tenant System
# This script sets up free SSL certificates using Let's Encrypt/Certbot

set -e

# Configuration
DOMAIN="khudroo.com"
EMAIL="admin@khudroo.com"  # Change this to your email
DOCKER_COMPOSE_FILE="docker-compose.ssl.yml"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=== Let's Encrypt SSL Setup for Odoo Multi-Tenant System ===${NC}"

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if domain is provided
if [ $# -gt 0 ]; then
    DOMAIN=$1
fi

if [ $# -gt 1 ]; then
    EMAIL=$2
fi

print_status "Setting up SSL for domain: $DOMAIN"
print_status "Email for Let's Encrypt: $EMAIL"

# Create necessary directories
print_status "Creating SSL directories..."
mkdir -p ssl/certbot/conf
mkdir -p ssl/certbot/www
mkdir -p ssl/logs
mkdir -p nginx/conf.d

# Generate DH parameters for additional security (2048 bit)
if [ ! -f ssl/dhparam.pem ]; then
    print_status "Generating DH parameters (this may take a few minutes)..."
    openssl dhparam -out ssl/dhparam.pem 2048
else
    print_status "DH parameters already exist, skipping generation..."
fi

# Create initial nginx configuration for HTTP-01 challenge
print_status "Creating temporary nginx configuration for certificate validation..."
cat > nginx/conf.d/temp-ssl.conf << EOF
# Temporary configuration for Let's Encrypt validation
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;
    
    # Include Let's Encrypt challenge configuration
    include /etc/nginx/letsencrypt.conf;
    
    # Redirect all other traffic to HTTPS (will be enabled after SSL setup)
    location / {
        return 200 'SSL setup in progress. Please wait...';
        add_header Content-Type text/plain;
    }
}
EOF

# Update docker-compose.ssl.yml with correct domain and email
print_status "Updating SSL configuration with your domain and email..."
sed -i.bak "s/khudroo.com/$DOMAIN/g" $DOCKER_COMPOSE_FILE
sed -i.bak "s/your-email@domain.com/$EMAIL/g" $DOCKER_COMPOSE_FILE

# Update main nginx.conf to include Let's Encrypt configuration
print_status "Nginx configuration already includes Let's Encrypt support inline..."

# Stop existing nginx if running
print_status "Stopping existing nginx container if running..."
docker-compose down nginx 2>/dev/null || true

# Start nginx with temporary configuration
print_status "Starting nginx with temporary configuration..."
docker-compose -f $DOCKER_COMPOSE_FILE up -d nginx

# Wait for nginx to be ready
print_status "Waiting for nginx to be ready..."
sleep 10

# Obtain SSL certificate using certbot
print_status "Obtaining SSL certificate from Let's Encrypt..."
print_warning "This may take a few minutes. Please ensure your domain points to this server."

# Run certbot to obtain certificate
docker-compose -f $DOCKER_COMPOSE_FILE run --rm certbot certonly \
    --webroot \
    --webroot-path=/var/www/certbot \
    --email $EMAIL \
    --agree-tos \
    --no-eff-email \
    --keep-until-expiring \
    --expand \
    -d $DOMAIN \
    -d www.$DOMAIN

# Check if certificate was obtained successfully
if [ -f ssl/certbot/conf/live/$DOMAIN/fullchain.pem ]; then
    print_status "SSL certificate obtained successfully!"
    
    # Update ssl.conf to point to Let's Encrypt certificates
    print_status "Updating SSL configuration to use Let's Encrypt certificates..."
    cat > nginx/conf.d/ssl.conf << EOF
# SSL Configuration with Let's Encrypt certificates
# Generated by setup-ssl.sh

# SSL certificate paths (Let's Encrypt)
ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
ssl_trusted_certificate /etc/letsencrypt/live/$DOMAIN/chain.pem;

# SSL protocols and ciphers
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
ssl_prefer_server_ciphers off;

# SSL session cache
ssl_session_cache shared:SSL:10m;
ssl_session_timeout 1d;
ssl_session_tickets off;

# OCSP stapling
ssl_stapling on;
ssl_stapling_verify on;

# DH parameters
ssl_dhparam /etc/nginx/ssl/dhparam.pem;

# Resolver for OCSP stapling
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;

# Security headers
add_header Strict-Transport-Security "max-age=63072000" always;
add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;
add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
EOF

    # Create production nginx configuration
    print_status "Creating production nginx configuration with SSL..."
    cat > nginx/conf.d/ssl-enabled.conf << EOF
# Production SSL configuration
# HTTP to HTTPS redirect
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;
    
    # Include Let's Encrypt configuration
    include /etc/nginx/letsencrypt.conf;
    
    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

# HTTPS server for main domain
server {
    listen 443 ssl http2;
    server_name $DOMAIN www.$DOMAIN;
    
    # Include SSL configuration
    include /etc/nginx/conf.d/ssl.conf;
    
    # Include Let's Encrypt configuration
    include /etc/nginx/letsencrypt.conf;
    
    # Custom error pages
    error_page 400 /errors/error_400.html;
    error_page 401 /errors/error_401.html;
    error_page 403 /errors/error_403.html;
    error_page 404 /errors/error_404.html;
    error_page 500 /errors/error_500.html;
    error_page 502 /errors/error_502.html;
    error_page 503 /errors/error_503.html;
    error_page 504 /errors/error_504.html;
    
    # Error pages location
    location ^~ /errors/ {
        root /usr/share/nginx/html;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }
    
    # Proxy to SaaS manager
    location / {
        proxy_pass http://saas_manager;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_intercept_errors on;
    }
}
EOF

    # Remove temporary configuration
    rm -f nginx/conf.d/temp-ssl.conf
    
    # Restart nginx with SSL configuration
    print_status "Restarting nginx with SSL configuration..."
    docker-compose -f $DOCKER_COMPOSE_FILE down nginx
    docker-compose -f $DOCKER_COMPOSE_FILE up -d nginx
    
    print_status "SSL setup completed successfully!"
    print_status "Your site is now available at: https://$DOMAIN"
    
    # Set up automatic renewal
    print_status "Setting up automatic certificate renewal..."
    
    # Create renewal script
    cat > ssl/renew-certificates.sh << 'EOF'
#!/bin/bash
echo "Renewing SSL certificates..."
docker-compose -f docker-compose.ssl.yml run --rm certbot renew
if [ $? -eq 0 ]; then
    echo "Certificates renewed successfully. Reloading nginx..."
    docker-compose -f docker-compose.ssl.yml exec nginx nginx -s reload
else
    echo "Certificate renewal failed!"
fi
EOF
    
    chmod +x ssl/renew-certificates.sh
    
    # Add cron job for automatic renewal (runs twice daily)
    print_status "Adding cron job for automatic renewal..."
    (crontab -l 2>/dev/null || echo "") | grep -v "renew-certificates.sh" | (cat; echo "0 2,14 * * * cd $(pwd) && ./ssl/renew-certificates.sh >> ssl/logs/renewal.log 2>&1") | crontab -
    
    print_status "Automatic renewal configured. Certificates will be checked twice daily."
    
else
    print_error "Failed to obtain SSL certificate!"
    print_error "Please check:"
    print_error "1. Your domain DNS points to this server"
    print_error "2. Port 80 is accessible from the internet"
    print_error "3. No firewall is blocking the connection"
    print_error "4. Check logs: docker-compose -f $DOCKER_COMPOSE_FILE logs certbot"
    exit 1
fi

print_status "SSL setup completed!"
print_status "Next steps:"
print_status "1. Test your SSL certificate: https://www.ssllabs.com/ssltest/analyze.html?d=$DOMAIN"
print_status "2. Check certificate expiration: openssl x509 -in ssl/certbot/conf/live/$DOMAIN/cert.pem -noout -dates"
print_status "3. Monitor renewal logs: tail -f ssl/logs/renewal.log"

echo -e "${GREEN}=== SSL Setup Complete ===${NC}"