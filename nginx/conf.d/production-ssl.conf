# Production SSL Configuration for Odoo Multi-Tenant System
# This file contains complete SSL server blocks for production use
# Include this file only after SSL certificates are obtained

# Include global SSL settings
include /etc/nginx/conf.d/ssl.conf;

# Rate limiting zones for HTTPS
limit_req_zone $binary_remote_addr zone=https_login:10m rate=5r/m;
limit_req_zone $binary_remote_addr zone=https_api:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=https_general:10m rate=50r/m;

# HTTP to HTTPS redirect for main domain
server {
    listen 80;
    server_name khudroo.com www.khudroo.com;
    
    # Include Let's Encrypt configuration for certificate renewal
    include /etc/nginx/letsencrypt.conf;
    
    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTP to HTTPS redirect for subdomains
server {
    listen 80;
    server_name ~^(?<subdomain>[^\.]+)\.khudroo\.com$;
    
    # Skip reserved subdomains
    if ($subdomain ~* "^(manage|master|health|www|api|admin)$") {
        return 404;
    }
    
    # Include Let's Encrypt configuration for certificate renewal
    include /etc/nginx/letsencrypt.conf;
    
    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS SaaS Manager - Main application
server {
    listen 443 ssl http2;
    server_name khudroo.com www.khudroo.com;
    
    # SSL Certificate Configuration (Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/khudroo.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/khudroo.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/khudroo.com/chain.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; frame-src 'self';" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), accelerometer=(), gyroscope=()" always;
    
    # Include Let's Encrypt configuration
    include /etc/nginx/letsencrypt.conf;
    
    # Enhanced logging for HTTPS traffic
    access_log /var/log/nginx/saas_manager_https.log combined;
    error_log /var/log/nginx/saas_manager_https_error.log warn;
    
    # Custom error pages
    error_page 400 /errors/error_400.html;
    error_page 401 /errors/error_401.html;
    error_page 403 /errors/error_403.html;
    error_page 404 /errors/error_404.html;
    error_page 500 /errors/error_500.html;
    error_page 502 /errors/error_502.html;
    error_page 503 /errors/error_503.html;
    error_page 504 /errors/error_504.html;
    
    # Error pages location
    location ^~ /errors/ {
        root /usr/share/nginx/html;
        expires 1d;
        add_header Cache-Control "public, immutable";
        
        location ~* /errors/.*\.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 7d;
            add_header Access-Control-Allow-Origin *;
        }
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "saas manager https healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Rate limited login endpoint
    location /login {
        limit_req zone=https_login burst=5 nodelay;
        
        proxy_pass http://saas_manager;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # Security headers for login
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }
    
    # Main application
    location / {
        limit_req zone=https_general burst=20 nodelay;
        
        proxy_pass http://saas_manager;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Error handling
        proxy_intercept_errors on;
    }
}

# HTTPS Tenant subdomains
server {
    listen 443 ssl http2;
    server_name ~^(?<subdomain>[^\.]+)\.khudroo\.com$;
    
    # SSL Certificate Configuration (wildcard certificate)
    ssl_certificate /etc/letsencrypt/live/khudroo.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/khudroo.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/khudroo.com/chain.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:; frame-src 'self';" always;
    
    # Include Let's Encrypt configuration
    include /etc/nginx/letsencrypt.conf;
    
    # Enhanced logging for tenant HTTPS traffic
    access_log /var/log/nginx/tenants_https.log combined;
    error_log /var/log/nginx/tenants_https_error.log warn;
    
    # Skip reserved subdomains
    if ($subdomain ~* "^(manage|master|health|www|api|admin)$") {
        return 404;
    }
    
    # Custom error pages
    error_page 400 /errors/error_400.html;
    error_page 401 /errors/error_401.html;
    error_page 403 /errors/error_403.html;
    error_page 404 /errors/error_404.html;
    error_page 500 /errors/error_500.html;
    error_page 502 /errors/error_502.html;
    error_page 503 /errors/error_503.html;
    error_page 504 /errors/error_504.html;
    
    # Error pages location
    location ^~ /errors/ {
        root /usr/share/nginx/html;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "tenant https healthy - subdomain: $subdomain\n";
        add_header Content-Type text/plain;
    }
    
    # Static assets with caching
    location /web/static/ {
        proxy_pass http://odoo_workers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Subdomain $subdomain;
        
        # Caching for static assets
        expires 1h;
        add_header Cache-Control "public, immutable";
        
        # Gzip compression
        gzip on;
        gzip_types text/css application/javascript text/javascript;
    }
    
    # Login endpoint with strict rate limiting
    location /web/login {
        limit_req zone=https_login burst=3 nodelay;
        
        proxy_pass http://odoo_workers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_Set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Subdomain $subdomain;
        
        # Security headers for login
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
    }
    
    # API endpoints with rate limiting
    location ~ ^/(web/dataset/call_kw|jsonrpc) {
        limit_req zone=https_api burst=30 nodelay;
        
        proxy_pass http://odoo_workers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Subdomain $subdomain;
    }
    
    # File uploads and downloads
    location /web/binary/ {
        client_max_body_size 100M;
        
        proxy_pass http://odoo_workers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_Set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Subdomain $subdomain;
        
        # Timeout for file operations
        proxy_read_timeout 300s;
        proxy_send_timeout 300s;
    }
    
    # General requests with rate limiting
    location / {
        limit_req zone=https_general burst=20 nodelay;
        
        proxy_pass http://odoo_workers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_Set_header X-Subdomain $subdomain;
        
        # WebSocket support for real-time features
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Error handling
        proxy_intercept_errors on;
    }
}