# Local Development HTTPS Configuration
# This enables HTTPS for localhost development

# HTTP to HTTPS redirect for localhost
server {
    listen 80;
    server_name localhost;
    
    # Let's Encrypt ACME challenge location
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri $uri/ =404;
        allow all;
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # Redirect to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server for localhost
server {
    listen 443 ssl;
    http2 on;
    server_name localhost;
    
    # Self-signed SSL certificates for development
    ssl_certificate /etc/nginx/ssl/localhost.crt;
    ssl_certificate_key /etc/nginx/ssl/localhost.key;
    
    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL_localhost:10m;
    ssl_session_timeout 1d;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Let's Encrypt ACME challenge location
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri $uri/ =404;
        allow all;
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # Custom error pages
    error_page 400 /errors/error_400.html;
    error_page 401 /errors/error_401.html;
    error_page 403 /errors/error_403.html;
    error_page 404 /errors/error_404.html;
    error_page 500 /errors/error_500.html;
    error_page 502 /errors/error_502.html;
    error_page 503 /errors/error_503.html;
    error_page 504 /errors/error_504.html;
    
    # Error pages location
    location ^~ /errors/ {
        root /usr/share/nginx/html;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "localhost https healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Proxy to SaaS manager
    location / {
        proxy_pass http://saas_manager;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Error handling
        proxy_intercept_errors on;
    }
}

# HTTPS for localhost subdomains (tenant development)
server {
    listen 443 ssl;
    http2 on;
    server_name ~^(?<subdomain>[^\.]+)\.localhost$;
    
    # Self-signed SSL certificates for development
    ssl_certificate /etc/nginx/ssl/localhost.crt;
    ssl_certificate_key /etc/nginx/ssl/localhost.key;
    
    # SSL settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL_localhost:10m;
    ssl_session_timeout 1d;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Skip reserved subdomains
    if ($subdomain ~* "^(manage|master|health|www|api|admin)$") {
        return 404;
    }
    
    # Custom error pages
    error_page 400 /errors/error_400.html;
    error_page 401 /errors/error_401.html;
    error_page 403 /errors/error_403.html;
    error_page 404 /errors/error_404.html;
    error_page 500 /errors/error_500.html;
    error_page 502 /errors/error_502.html;
    error_page 503 /errors/error_503.html;
    error_page 504 /errors/error_504.html;
    
    # Error pages location
    location ^~ /errors/ {
        root /usr/share/nginx/html;
        expires 1d;
        add_header Cache-Control "public, immutable";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "tenant https healthy - subdomain: $subdomain\n";
        add_header Content-Type text/plain;
    }
    
    # Proxy to Odoo workers
    location / {
        proxy_pass http://odoo_workers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Subdomain $subdomain;
        
        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        
        # Error handling
        proxy_intercept_errors on;
    }
}