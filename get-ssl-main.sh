#!/bin/bash

# Quick SSL Certificate Setup - Main Domain Only
# Gets certificate for main domain only, not www subdomain

set -e

DOMAIN="khudroo.com"
EMAIL="admin@khudroo.com"

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}=== Quick SSL Setup for $DOMAIN (main domain only) ===${NC}"

# Override domain/email if provided
if [ $# -gt 0 ]; then DOMAIN=$1; fi
if [ $# -gt 1 ]; then EMAIL=$2; fi

# Create directories
echo "Creating SSL directories..."
mkdir -p ssl/certbot/conf ssl/certbot/www ssl/logs

# Get network name directly
echo "Finding Docker network..."
NETWORK_NAME=$(docker network ls --format "{{.Name}}" | grep "odoo-multi-tenant-system" | head -1)

if [ -z "$NETWORK_NAME" ]; then
    echo "Available networks:"
    docker network ls
    echo -e "${RED}Network detection failed${NC}"
    exit 1
fi

echo -e "${GREEN}Using network: $NETWORK_NAME${NC}"

# Restart nginx to mount volumes
echo "Restarting nginx..."
docker-compose restart nginx
sleep 5

# Test nginx
if curl -s --max-time 5 http://localhost/health > /dev/null; then
    echo -e "${GREEN}✓ Nginx is responding locally${NC}"
else
    echo -e "${YELLOW}⚠ Nginx not responding locally, but continuing...${NC}"
fi

# Get SSL certificate for MAIN DOMAIN ONLY (no www subdomain)
echo -e "${GREEN}Getting SSL certificate from Let's Encrypt...${NC}"
echo -e "${YELLOW}Getting certificate for: $DOMAIN (main domain only)${NC}"

docker run --rm \
    -v "$(pwd)/ssl/certbot/conf:/etc/letsencrypt" \
    -v "$(pwd)/ssl/certbot/www:/var/www/certbot" \
    --network "$NETWORK_NAME" \
    certbot/certbot certonly \
    --webroot \
    --webroot-path=/var/www/certbot \
    --email "$EMAIL" \
    --agree-tos \
    --no-eff-email \
    --keep-until-expiring \
    --non-interactive \
    -d "$DOMAIN"

# Check if certificate was obtained
if [ -f "ssl/certbot/conf/live/$DOMAIN/fullchain.pem" ]; then
    echo -e "${GREEN}✅ SSL Certificate obtained successfully!${NC}"
    
    # Create a basic SSL config for main domain only
    cat > nginx/conf.d/main-ssl.conf << EOF
# SSL Configuration for main domain only
# Generated by get-ssl-main.sh

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name $DOMAIN;
    
    # ACME challenge location
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files \$uri \$uri/ =404;
        allow all;
        expires -1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # Redirect to HTTPS
    location / {
        return 301 https://\$server_name\$request_uri;
    }
}

# HTTPS server for main domain
server {
    listen 443 ssl;
    http2 on;
    server_name $DOMAIN;
    
    # SSL certificates
    ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/$DOMAIN/chain.pem;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL_MAIN:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # ACME challenge location
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files \$uri \$uri/ =404;
        allow all;
    }
    
    # Main application proxy
    location / {
        proxy_pass http://saas_manager;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Port \$server_port;
        
        # WebSocket support
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection \$connection_upgrade;
        
        # Error handling
        proxy_intercept_errors on;
    }
}
EOF

    echo -e "${GREEN}✓ SSL config created for main domain${NC}"
    
    # Disable other SSL configs to avoid conflicts
    for config in nginx/conf.d/*ssl*.conf; do
        if [ "$config" != "nginx/conf.d/main-ssl.conf" ] && [ -f "$config" ]; then
            mv "$config" "$config.disabled"
            echo -e "${GREEN}✓ Disabled conflicting config: $(basename $config)${NC}"
        fi
    done
    
    # Add include to nginx.conf if not present
    if ! grep -q "include /etc/nginx/conf.d/\*.conf;" nginx/nginx.conf; then
        sed -i '/^}$/i\    include /etc/nginx/conf.d/*.conf;' nginx/nginx.conf
        echo -e "${GREEN}✓ Added conf.d include to nginx.conf${NC}"
    fi
    
    # Test nginx config
    if docker-compose exec nginx nginx -t; then
        echo -e "${GREEN}✓ Nginx config test passed${NC}"
        
        # Restart nginx
        docker-compose restart nginx
        echo -e "${GREEN}✓ Nginx restarted${NC}"
        
        echo ""
        echo -e "${GREEN}🎉 SSL SETUP COMPLETED!${NC}"
        echo -e "${GREEN}✅ Your site: https://$DOMAIN${NC}"
        echo -e "${GREEN}✅ SSL Certificate: Let's Encrypt (globally trusted)${NC}"
        echo -e "${GREEN}✅ Test SSL: https://www.ssllabs.com/ssltest/analyze.html?d=$DOMAIN${NC}"
        echo ""
        echo -e "${YELLOW}📝 Note: Only main domain ($DOMAIN) has SSL${NC}"
        echo -e "${YELLOW}    www.$DOMAIN was skipped due to DNS issues${NC}"
        echo -e "${YELLOW}    You can add www subdomain later after fixing DNS${NC}"
        
        # Setup auto-renewal
        cat > ssl/renew-main.sh << 'EOF'
#!/bin/bash
cd "$(dirname "$0")/.."
NETWORK=$(docker network ls --format "{{.Name}}" | grep "odoo-multi-tenant-system" | head -1)
docker run --rm \
    -v "$(pwd)/ssl/certbot/conf:/etc/letsencrypt" \
    -v "$(pwd)/ssl/certbot/www:/var/www/certbot" \
    --network "$NETWORK" \
    certbot/certbot renew
docker-compose exec nginx nginx -s reload
EOF
        chmod +x ssl/renew-main.sh
        
        # Add to cron
        (crontab -l 2>/dev/null | grep -v "ssl/renew"; echo "0 2,14 * * * cd $(pwd) && ./ssl/renew-main.sh >> ssl/logs/renewal.log 2>&1") | crontab -
        
        echo -e "${GREEN}✅ Auto-renewal setup complete${NC}"
        
    else
        echo -e "${RED}✗ Nginx config test failed${NC}"
        docker-compose logs nginx --tail=10
    fi
    
else
    echo -e "${RED}✗ SSL certificate generation failed${NC}"
    echo -e "${YELLOW}Please check the error messages above${NC}"
fi